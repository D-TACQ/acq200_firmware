/*****************************************************************************
 *
 * File:
 *
 * Created by IntelliJ IDEA.
 * User: pgm
 * Date: May 27, 2002
 * Time: 12:35:59 PM
 *
 * $RCSfile: DvmFrame.java,v $
 *
 * Copyright (C) 2002 D-TACQ Solutions Ltd
 * not to be used without owner's permission
 *
 * Description:
 *
 * $Id: DvmFrame.java,v 1.7 2002/05/27 10:25:10 pgm Exp $
 * $Log: DvmFrame.java,v $
 * Revision 1.7  2002/05/27 10:25:10  pgm
 * std headers throughout
 *
 *
 *
\*****************************************************************************/

import dt100.StreamingAdapter;
import dt100.StreamingInfo;
import dt100.StreamFrame;
import dt100.StreamingCallbackManager;

import java.awt.*;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.Map;
import java.util.HashMap;
import javax.swing.*;

final class Key {
    int ii;
    public Key( int ii ) {
        this.ii = ii;
    }
    public void setValue( int ii ) {
        this.ii = ii;
    }
    // needed by HashMap
    public boolean equals( Object o ) {
        return ii == ((Key)o).ii;
    }
    public int hashCode() { return ii; }
}


public class DvmFrame
        extends MonitorFrame// multiple singleton!
{

    private static Map frames = new HashMap( 128 );
    private static Key ref_key = new Key( 0 );

    public static DvmFrame instance( final int ii ){
        ref_key.setValue( ii );
        DvmFrame frame;

        if ( frames.containsKey( ref_key ) ){
            frame = (DvmFrame)frames.get( ref_key );
        }else{
            Key newquay = new Key( ii );
            frame = new DvmFrame( ii, "dt100 DVM Frame for channel "+ii );
            frames.put( newquay, frame );
        }
        return frame;
    }
    public void setFiltered( boolean filtered ){
        isFiltered = filtered;
    }
    public void setVolts( boolean volts ){
        isVolts = volts;
    }


    private int channel;
    private boolean isFiltered;
    private boolean isVolts;


    private DvmFrame()
    {
        // This code is automatically generated by Visual Cafe when you add
        // components to the visual environment. It instantiates and initializes
        // the components. To modify the code, only use code syntax that matches
        // what Visual Cafe can generate, or Visual Cafe may be unable to back
        // parse your Java file into its visual environment.
        //{{INIT_CONTROLS
        getContentPane().setLayout(new GridBagLayout());
        setSize(530,129);
        setVisible(false);
        dvmPanel.setLayout(new GridBagLayout());
        dvmPanel.setEnabled(false);
        getContentPane().add(dvmPanel, new com.symantec.itools.awt.GridBagConstraintsD(0,0,1,1,1.0,1.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.BOTH,new Insets(0,0,0,0),-165,-212));
        dvmPanel.setBounds(0,0,530,129);
        JPanel21.setToolTipText("digital voltmeter (when streaming)");
        JPanel21.setLayout(new GridBagLayout());
        dvmPanel.add(JPanel21, new com.symantec.itools.awt.GridBagConstraintsD(0,1,1,1,1.0,1.0,java.awt.GridBagConstraints.NORTHWEST,java.awt.GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
        JPanel21.setBounds(0,0,530,129);
        dvmReadout.setEditable(false);
        dvmReadout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        dvmReadout.setText("-10.000 V");
        JPanel21.add(dvmReadout, new com.symantec.itools.awt.GridBagConstraintsD(0,1,1,1,1.0,1.0,java.awt.GridBagConstraints.NORTHWEST,java.awt.GridBagConstraints.HORIZONTAL,new Insets(8,8,8,8),0,0));
        dvmReadout.setBackground(java.awt.Color.white);
        dvmReadout.setFont(new Font("MonoSpaced", Font.BOLD, 90));
        dvmReadout.setBounds(8,8,514,107);
        //}}

        //{{INIT_MENUS
        //}}
    }

    private DvmFrame(int ii, String sTitle)
    {
        this();
        setTitle(sTitle);
        channel = ii;
        initMonitor();
    }

    public void setVisible(boolean b)
    {
        if (b)
            setLocation(50, 50);
        super.setVisible(b);
    }

    static public void main(String args[])
    {
        (new DvmFrame()).setVisible(true);
    }

    public void addNotify()
    {
        // Record the size of the window prior to calling parents addNotify.
        Dimension size = getSize();

        super.addNotify();

        if (frameSizeAdjusted)
            return;
        frameSizeAdjusted = true;

        // Adjust size of frame according to the insets and menu bar
        Insets insets = getInsets();
        javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
        int menuBarHeight = 0;
        if (menuBar != null)
            menuBarHeight = menuBar.getPreferredSize().height;
        setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
    }

    // Used by addNotify
    boolean frameSizeAdjusted = false;

    //{{DECLARE_CONTROLS
    javax.swing.JPanel dvmPanel = new javax.swing.JPanel();
    javax.swing.JPanel JPanel21 = new javax.swing.JPanel();
    javax.swing.JTextField dvmReadout = new javax.swing.JTextField();
    //}}

    //{{DECLARE_MENUS
    //}}

    class DvmStreamingAdapter implements StreamingAdapter {
        private java.text.NumberFormat dvm_nf = java.text.NumberFormat.getInstance();
        private String units = isVolts? "V": "";

        private void updateDisplay( String display ) {
            boolean show_change = dvmReadout.getText().compareTo(display) != 0;

            dvmReadout.setForeground( show_change? Color.red: Color.black);
            dvmReadout.setText( display );
        }
        private int getData( StreamFrame f ){
            int data;

            if ( isFiltered ){
                int itotal = 0;

                for ( int isam = 0; isam != 63; ++isam ){
                    itotal += f.getDataPoint( isam, channel );
                }
                data = itotal/64;
            }else{
                data = f.getDataPoint( 0, channel );
            }
            return data;
        }
        private String formatData( int data ) {
            String display;

            if ( isVolts ){
                float fdata = data*10;
                fdata/= 65536;
                String sign = fdata >= 0.0f? "+": "";
                display = sign + dvm_nf.format( fdata ) + "V";
            }else{
                String nz_digits = Integer.toHexString( data&0x0ffff );

                switch( nz_digits.length() ){
                    case 1:
                        display = " 000" + nz_digits; break;
                    case 2:
                        display = " 00"  + nz_digits;  break;
                    case 3:
                        display = " 0"   + nz_digits; break;
                    default:
                        display = " "    + nz_digits;
                }
            }
            return display;
        }
        private void updateDvm( StreamingInfo info ) {
            updateDisplay(
                    formatData(
                        getData( info.getLastFrame() ) ) );
       }
        public DvmStreamingAdapter() {
                   dvm_nf.setMaximumFractionDigits( 4 );
                    dvm_nf.setMinimumFractionDigits( 4 );
                    dvm_nf.setMaximumIntegerDigits( 2 );
                    dvm_nf.setMinimumIntegerDigits( 2 );
            updateDisplay( "..." );
        }
        public void onNewFrame( StreamingInfo info ) {
            if ( isVisible() ){
                debug.Debug.println( "DvmStreamingAdapter.onNewFrame");
                if ( ok_to_update ){
                    updateDvm( info );
                    ok_to_update = false;
                }
                StreamingCallbackManager.instance().register( this );
            }
        }
    }
    private DvmStreamingAdapter adapter = new DvmStreamingAdapter();

    protected StreamingAdapter getStreamingAdapter() {
        return adapter;
    }
}