/*****************************************************************************
 *
 * File:
 *
 * Created by IntelliJ IDEA.
 * User: pgm
 * Date: May 27, 2002
 * Time: 12:35:59 PM
 *
 * $RCSfile: DioMonitorFrame.java,v $
 *
 * Copyright (C) 2002 D-TACQ Solutions Ltd
 * not to be used without owner's permission
 *
 * Description:
 *
 * $Id: DioMonitorFrame.java,v 1.7 2002/06/12 20:25:24 pgm Exp $
 * $Log: DioMonitorFrame.java,v $
 * Revision 1.7  2002/06/12 20:25:24  pgm
 * no control without commit, ChannelMask is per board
 *
 * Revision 1.6  2002/05/27 10:25:10  pgm
 * std headers throughout
 *
 *
 *
\*****************************************************************************/

import dt100.StreamingInfo;
import dt100.StreamingAdapter;
import dt100.StreamingCallbackManager;

import java.awt.*;
import java.awt.event.ComponentAdapter;
import javax.swing.*;

public class DioMonitorFrame extends MonitorFrame
// singleton
{
    static private DioMonitorFrame _instance;

    public static DioMonitorFrame instance( String title ) {
        if ( _instance == null ){
            _instance = new DioMonitorFrame( title );
        }
        return _instance;
    }

	private DioMonitorFrame()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		getContentPane().setLayout(new GridBagLayout());
		setSize(406,100);
		setVisible(false);
		dvmPanel.setLayout(new GridBagLayout());
		dvmPanel.setEnabled(false);
		getContentPane().add(dvmPanel, new com.symantec.itools.awt.GridBagConstraintsD(0,0,1,1,1.0,1.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.BOTH,new Insets(0,0,0,0),-165,-212));
		dvmPanel.setBounds(0,0,406,100);
		JPanel19.setLayout(new GridBagLayout());
		dvmPanel.add(JPanel19, new com.symantec.itools.awt.GridBagConstraintsD(0,0,1,1,1.0,0.0,java.awt.GridBagConstraints.NORTHWEST,java.awt.GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));
		JPanel19.setBounds(0,5,406,90);
		JLabel20.setText("Digital IO :");
		JPanel19.add(JLabel20, new com.symantec.itools.awt.GridBagConstraintsD(0,0,1,1,0.0,0.0,java.awt.GridBagConstraints.NORTHWEST,java.awt.GridBagConstraints.NONE,new Insets(10,10,0,10),0,0));
		JLabel20.setBounds(10,10,56,15);
		JScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
		JScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		JScrollPane5.setAutoscrolls(true);
		JScrollPane5.setOpaque(true);
		JPanel19.add(JScrollPane5, new com.symantec.itools.awt.GridBagConstraintsD(0,1,1,1,1.0,0.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.BOTH,new Insets(0,8,8,8),300,30));
		JScrollPane5.setBounds(8,25,390,56);
		dioReadoutTable.setPreferredScrollableViewportSize(new java.awt.Dimension(512,400));
		dioReadoutTable.setRowHeight(24);
		JScrollPane5.getViewport().add(dioReadoutTable);
		dioReadoutTable.setBounds(0,0,387,0);
		JPanel22.setLayout(null);
		JPanel19.add(JPanel22, new com.symantec.itools.awt.GridBagConstraintsD(0,2,6,1,1.0,1.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.BOTH,new Insets(0,0,0,0),0,0));
		JPanel22.setBounds(0,89,406,1);
		JPanel22.setVisible(false);
		diHiChange.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		diHiChange.setText("1");
		JPanel22.add(diHiChange);
		diHiChange.setForeground(java.awt.Color.red);
		diHiChange.setFont(new Font("SansSerif", Font.BOLD, 24));
		diHiChange.setBounds(45,32,22,22);
		doHiChange.setText("1");
		JPanel22.add(doHiChange);
		doHiChange.setBackground(new java.awt.Color(204,204,204));
		doHiChange.setForeground(new java.awt.Color(102,102,153));
		doHiChange.setFont(new Font("SansSerif", Font.ITALIC, 24));
		doHiChange.setBounds(224,1,22,22);
		diLoChange.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		diLoChange.setText("0");
		JPanel22.add(diLoChange);
		diLoChange.setForeground(java.awt.Color.red);
		diLoChange.setFont(new Font("SansSerif", Font.BOLD, 24));
		diLoChange.setBounds(116,37,22,22);
		doLoChange.setText("0");
		JPanel22.add(doLoChange);
		doLoChange.setBackground(new java.awt.Color(204,204,204));
		doLoChange.setForeground(new java.awt.Color(102,102,153));
		doLoChange.setFont(new Font("SansSerif", Font.ITALIC, 24));
		doLoChange.setBounds(185,37,22,22);
		diHiSteady.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		diHiSteady.setText("1");
		JPanel22.add(diHiSteady);
		diHiSteady.setForeground(java.awt.Color.black);
		diHiSteady.setFont(new Font("SansSerif", Font.BOLD, 24));
		diHiSteady.setBounds(255,32,22,22);
		diLoSteady.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		diLoSteady.setText("0");
		JPanel22.add(diLoSteady);
		diLoSteady.setForeground(java.awt.Color.black);
		diLoSteady.setFont(new Font("SansSerif", Font.BOLD, 24));
		diLoSteady.setBounds(325,32,22,22);
		doLoSteady.setText("0");
		JPanel22.add(doLoSteady);
		doLoSteady.setBackground(new java.awt.Color(204,204,204));
		doLoSteady.setForeground(new java.awt.Color(102,102,153));
		doLoSteady.setFont(new Font("SansSerif", Font.ITALIC, 24));
		doLoSteady.setBounds(395,32,22,22);
		doHiSteady.setText("1");
		JPanel22.add(doHiSteady);
		doHiSteady.setBackground(new java.awt.Color(204,204,204));
		doHiSteady.setForeground(new java.awt.Color(102,102,153));
		doHiSteady.setFont(new Font("SansSerif", Font.ITALIC, 24));
		doHiSteady.setBounds(454,32,22,22);
		//}}

		//{{INIT_MENUS
		//}}
	}

	private DioMonitorFrame(String sTitle)
	{
		this();
		setTitle(sTitle);
        initMonitor();
        initChannelModel();
	}

	public void setVisible(boolean b)
	{
		if (b)
			setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new DioMonitorFrame()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JPanel dvmPanel = new javax.swing.JPanel();
	javax.swing.JPanel JPanel19 = new javax.swing.JPanel();
	javax.swing.JLabel JLabel20 = new javax.swing.JLabel();
	javax.swing.JScrollPane JScrollPane5 = new javax.swing.JScrollPane();
	javax.swing.JTable dioReadoutTable = new javax.swing.JTable();
	javax.swing.JPanel JPanel22 = new javax.swing.JPanel();
	javax.swing.JLabel diHiChange = new javax.swing.JLabel();
	javax.swing.JLabel doHiChange = new javax.swing.JLabel();
	javax.swing.JLabel diLoChange = new javax.swing.JLabel();
	javax.swing.JLabel doLoChange = new javax.swing.JLabel();
	javax.swing.JLabel diHiSteady = new javax.swing.JLabel();
	javax.swing.JLabel diLoSteady = new javax.swing.JLabel();
	javax.swing.JLabel doLoSteady = new javax.swing.JLabel();
	javax.swing.JLabel doHiSteady = new javax.swing.JLabel();
	//}}

	//{{DECLARE_MENUS
	//}}

	boolean dvm_update_requested;
	int dio_previous;
	int dio_simulate_seed; // = 0x80000;    // TEST ONLY

    public static SC_DioReadbackTableModel theReadbackDioTableModel = new SC_DioReadbackTableModel();

    public void initChannelModel() {

        class LabelCellRenderer extends javax.swing.table.DefaultTableCellRenderer {
            public Component
            getTableCellRendererComponent(
                JTable table, Object value,
                boolean isSelected, boolean hasFocus,
                int row, int column ) {

                return (Component)value;
            }
        }
        theReadbackDioTableModel.setTable( dioReadoutTable );
        dioReadoutTable.setDefaultRenderer( JLabel.class, new LabelCellRenderer() );
    }
    protected StreamingAdapter getStreamingAdapter() {
        return adapter;
    }

    private StreamingAdapter adapter = new StreamingAdapter() {
        private java.text.NumberFormat nfFloat = java.text.NumberFormat.getInstance();

        private void updateDio( StreamingInfo info ) {
            // now handle the DIO

            int dio = info.getLastFrame().getDIO();
/*
            dio |= dio_simulate_seed =
                    dio_simulate_seed == 1? 0x8000:
                                            dio_simulate_seed>>>1;
*/
            for ( int ibit = 0, dio_mask = 0x0001; ibit != 16;
                  dio_mask <<= 1, ++ibit ){

                String setup =
                    (String)SignalConditioningFrame.theSC_DioTableModel.getValueAt( 0, ibit );
                javax.swing.JLabel label = null;

                switch( setup.charAt( 0 ) ){
                    case '-':
                        {
                            boolean high    = (dio&dio_mask) != 0;
                            boolean washigh = (dio_previous&dio_mask) != 0;
                            boolean changed = high != washigh;

                            if ( changed ){
                                label = high? diHiChange: diLoChange;
                            }else{
                                label = high? diHiSteady: diLoSteady;
                            }
                            break;
                        }
                    case '1':
                        label = doHiSteady; break;
                    case '0':
                        label = doLoSteady; break;
                }
                theReadbackDioTableModel.setValueAt( label, 0, ibit );
            }

            theReadbackDioTableModel.fireTableDataChanged();
            dio_previous = dio;
            dvm_update_requested = false;
        }
        public void onNewFrame( StreamingInfo info ) {
            if ( isVisible() ){
                debug.Debug.println( "DioStreamingAdapter.onNewFrame");
                if ( ok_to_update ){
                    updateDio( info );
                    ok_to_update = false;
                }
                StreamingCallbackManager.instance().register( this );
            }
        }
    };
}