/*****************************************************************************
 *
 * File:
 *
 * Created by IntelliJ IDEA.
 * User: pgm
 * Date: May 27, 2002
 * Time: 12:35:59 PM
 *
 * $RCSfile: AnalogTriggerFrame.java,v $
 *
 * Copyright (C) 2002 D-TACQ Solutions Ltd
 * not to be used without owner's permission
 *
 * Description:
 *
 * $Id: AnalogTriggerFrame.java,v 1.5.4.3 2004/06/01 14:35:04 pgm Exp $
 * $Log: AnalogTriggerFrame.java,v $
 * Revision 1.5.4.3  2004/06/01 14:35:04  pgm
 * abandoned dt100gui package expt
 *
 * Revision 1.5.4.2  2004/06/01 13:45:07  pgm
 * *** empty log message ***
 *
 * Revision 1.5  2002/05/27 14:46:25  pgm
 * analog trigger runs
 *
 * Revision 1.4  2002/05/27 10:25:10  pgm
 * std headers throughout
 *
 *
 *
\*****************************************************************************/

import dt100.*;

import java.awt.*;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.*;

public class AnalogTriggerFrame extends FrameWithModel
{
	public AnalogTriggerFrame()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		getContentPane().setLayout(new BorderLayout(0,0));
		setSize(405,305);
		setVisible(false);
		atrigPanel.setLayout(new GridBagLayout());
		getContentPane().add(BorderLayout.CENTER, atrigPanel);
		atrigPanel.setBounds(0,0,666,415);
		JScrollPane6.setOpaque(true);
		atrigPanel.add(JScrollPane6, new com.symantec.itools.awt.GridBagConstraintsD(0,0,1,1,1.0,1.0,java.awt.GridBagConstraints.CENTER,java.awt.GridBagConstraints.BOTH,new Insets(0,0,0,0),213,12));
		JScrollPane6.setBounds(0,0,666,415);
		JScrollPane6.getViewport().add(atrigTable);
		atrigTable.setBounds(0,0,663,0);
		//}}

		//{{INIT_MENUS
		//}}
	}

    AnalogTriggerTableModel analogTriggerTableModel;

	public AnalogTriggerFrame(String sTitle)
	{
		this();
		setTitle(sTitle);
	}

	public void setVisible(boolean b)
	{
		if (b)
			setLocation(50, 50);
		super.setVisible(b);
	}

	static public void main(String args[])
	{
		(new AnalogTriggerFrame()).setVisible(true);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension size = getSize();

		super.addNotify();

		if (frameSizeAdjusted)
			return;
		frameSizeAdjusted = true;

		// Adjust size of frame according to the insets and menu bar
		Insets insets = getInsets();
		javax.swing.JMenuBar menuBar = getRootPane().getJMenuBar();
		int menuBarHeight = 0;
		if (menuBar != null)
			menuBarHeight = menuBar.getPreferredSize().height;
		setSize(insets.left + insets.right + size.width, insets.top + insets.bottom + size.height + menuBarHeight);
	}

	// Used by addNotify
	boolean frameSizeAdjusted = false;

	//{{DECLARE_CONTROLS
	javax.swing.JPanel atrigPanel = new javax.swing.JPanel();
	javax.swing.JScrollPane JScrollPane6 = new javax.swing.JScrollPane();
	javax.swing.JTable atrigTable = new javax.swing.JTable();
	//}}

	//{{DECLARE_MENUS
	//}}
    public void initModel() {
        analogTriggerTableModel = new AnalogTriggerTableModel();
        analogTriggerTableModel.setTable( atrigTable );
    }
    class ChannelThresholdSetter extends ResultCallback {
        ArrayList commands = new ArrayList();
        Iterator command_it;

        private void addTransaction( Transaction t ){
            t.setCallback( this );
            commands.add( t );
        }

        public ChannelThresholdSetter() {
            Iterator it = analogTriggerTableModel.getChannels();
            addTransaction( SetTransaction.clearAnalogThresholds());
            while( it.hasNext() ){
                Channel c = (Channel)it.next();
                if ( c.getAnalogTrigger().isEnabled().booleanValue() ){
                    addTransaction( c.getAnalogTrigger().newTransaction( c ) );
                }
            }
            addTransaction( SetTransaction.selectThresholdDetector( "FAST_MULTI" ) );
            command_it = commands.iterator();
        }
        public void run () {
            if ( command_it.hasNext() ){
                dt100.Dt100.instance().execMasterTransaction( (Transaction)command_it.next() );
            }
        }
    }
    protected void onCommit() {
        new ChannelThresholdSetter().run();
    }
}