
import dt100.*;

import javax.swing.*;
import java.text.NumberFormat;
import java.awt.*;

/**
 * Created by IntelliJ IDEA.
 * User: pgm
 * Date: Jun 26, 2004
 * Time: 4:18:48 PM
 * To change this template use File | Settings | File Templates.
 */
public class MultiframeStatsPanel extends JPanel{
    private JPanel panel;
    private JTextField previousSecond;
    private JTextField currentSecond;
    private JTextField currentNumber;
    private JTextField previousNumber;
    private JPanel topPanel;
    private JPanel bottomPanel;
    private JTextField blen;

    private JCheckBox isMF;
    private JTextField jiffies;
    private JTextField pulseNumber;
    private JCheckBox isOverrun;
    private JTextField droppedFrames;
    private JTextField acceptedFrames;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// !!! IMPORTANT !!!
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * !!! IMPORTANT !!!
     * DO NOT edit this method OR call it in your code!
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 3, new Insets(5, 5, 5, 5), -1, -1));
        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Multi Frame Stats"));
        topPanel = new JPanel();
        topPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(topPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null));
        topPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
        final JLabel label1 = new JLabel();
        label1.setText("Update #");
        topPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        final JLabel label2 = new JLabel();
        label2.setText("Path");
        topPanel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        final JLabel label3 = new JLabel();
        label3.setText("Current Second");
        topPanel.add(label3, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        currentNumber = new JTextField();
        currentNumber.setEditable(false);
        topPanel.add(currentNumber, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null));
        previousNumber = new JTextField();
        previousNumber.setEditable(false);
        topPanel.add(previousNumber, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(75, -1), null));
        currentSecond = new JTextField();
        currentSecond.setEditable(false);
        topPanel.add(currentSecond, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(400, -1), null));
        previousSecond = new JTextField();
        previousSecond.setEditable(false);
        topPanel.add(previousSecond, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null));
        final JLabel label4 = new JLabel();
        label4.setText("Previous Second");
        topPanel.add(label4, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        bottomPanel = new JPanel();
        bottomPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(7, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(bottomPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, 1, 1, null, null, null));
        bottomPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
        final JLabel label5 = new JLabel();
        label5.setText("MultiFrame");
        bottomPanel.add(label5, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        isMF = new JCheckBox();
        isMF.setEnabled(false);
        isMF.setText("");
        bottomPanel.add(isMF, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        final JLabel label6 = new JLabel();
        label6.setText("BLEN");
        bottomPanel.add(label6, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        blen = new JTextField();
        blen.setEditable(false);
        blen.setEnabled(true);
        bottomPanel.add(blen, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null));
        final JLabel label7 = new JLabel();
        label7.setText("Jiffies");
        bottomPanel.add(label7, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        final JLabel label8 = new JLabel();
        label8.setText("Pulse #");
        bottomPanel.add(label8, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        jiffies = new JTextField();
        jiffies.setEditable(false);
        bottomPanel.add(jiffies, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null));
        pulseNumber = new JTextField();
        pulseNumber.setEditable(false);
        bottomPanel.add(pulseNumber, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null));
        final JLabel label9 = new JLabel();
        label9.setText("Overrun");
        bottomPanel.add(label9, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        isOverrun = new JCheckBox();
        isOverrun.setEnabled(false);
        isOverrun.setText("");
        bottomPanel.add(isOverrun, new com.intellij.uiDesigner.core.GridConstraints(6, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        final JLabel label10 = new JLabel();
        label10.setText("Dropped Frames");
        bottomPanel.add(label10, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        droppedFrames = new JTextField();
        droppedFrames.setEditable(false);
        bottomPanel.add(droppedFrames, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null));
        final JLabel label11 = new JLabel();
        label11.setText("Accepted Frames");
        bottomPanel.add(label11, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null));
        acceptedFrames = new JTextField();
        acceptedFrames.setEditable(false);
        bottomPanel.add(acceptedFrames, new com.intellij.uiDesigner.core.GridConstraints(5, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null));
    }

    class StreamingStatsAdapter implements StreamingAdapter {
         public void onNewFrame(StreamingInfo info) {
            StreamFrame f = info.getLastFrame();

            if (Dt100StreamFrame.isMF(f)){
                isMF.getModel().setSelected(true);
                blen.setText(Integer.toString(Dt100StreamFrame.BLEN(f)));
                jiffies.setText(Integer.toString(Dt100StreamFrame.Jiffies(f)));
                pulseNumber.setText(Integer.toString(Dt100StreamFrame.PulseNum(f)));
                isOverrun.getModel().setSelected(Dt100StreamFrame.Over(f) != 0);
                // @@todo should be on timer cos if dropping lots of frames, no streaming update!!
                droppedFrames.setText(Integer.toString(StreamingCallback.getDroppedFrameCount()));
                acceptedFrames.setText(Integer.toString(info.getPasses()));
            }else{
                isMF.getModel().setSelected(false);
                blen.setText(" ");
                jiffies.setText(" ");
                pulseNumber.setText(" ");
                isOverrun.getModel().setSelected(false);
            }
            StreamingCallbackManager.instance().register(this);
        }

        public StreamingStatsAdapter() {
        }
    }
    private Runnable client_endCB;

    private ResultCallback endCB = new ResultCallback() {
        public void run() {
            setPreviousNumber(getStatus());
            setPreviousSecond(getResultString());
            if (getClient_endCB() != null){
                getClient_endCB().run();
            }
        }
    };
    private ResultCallback startCB = new ResultCallback() {
        public void run() {
            setCurrentNumber(getStatus());
            setCurrentSecond(getResultString());
        }
    };

    private MultiframeStatsPanel() {
        // @@todo Anyone for top down color control ?
        // panel.setBackground(java.awt.Color.white);
        topPanel.setBackground(java.awt.Color.white);
        bottomPanel.setBackground(java.awt.Color.white);
        currentNumber.setBackground(java.awt.Color.white);
        currentSecond.setBackground(java.awt.Color.white);
        previousSecond.setBackground(java.awt.Color.white);
        previousNumber.setBackground(java.awt.Color.white);
        blen.setBackground(java.awt.Color.white);
        jiffies.setBackground(java.awt.Color.white);
        pulseNumber.setBackground(java.awt.Color.white);
        isMF.setBackground(java.awt.Color.white);
        isOverrun.setBackground(java.awt.Color.white);
        droppedFrames.setBackground(java.awt.Color.white);
        acceptedFrames.setBackground(java.awt.Color.white);
        add(panel);


    }

    public void setCurrentSecond(String str){
        currentSecond.setText(str);
    }
    public void setPreviousSecond(String str){
        previousSecond.setText(str);
    }
    public String getCurrentSecond() {
        return currentSecond.getText();
    }
    public String getPreviousSecond() {
        return previousSecond.getText();
    }
    public String getJiffies() {
        return jiffies.getText();
    }

    public void onStreamStart() {
        Dt100.instance().setStreamingDatasetStartCallback(startCB);
        Dt100.instance().setStreamingDatasetEndCallback(endCB);
        StreamingCallbackManager.instance().register(new StreamingStatsAdapter());
    }
    public void onStreamStop() {
        Dt100.instance().setStreamingDatasetStartCallback(null);
        Dt100.instance().setStreamingDatasetEndCallback(null);
    }

    public int getCurrentNumber() {
        return Integer.parseInt(currentNumber.getText());
    }
    public int getPreviousNumber() {
        return Integer.parseInt(previousNumber.getText());
    }

    public void setCurrentNumber(int update_number) {
        this.currentNumber.setText(String.valueOf(update_number));
    }
    public void setPreviousNumber(int update_number) {
        this.previousNumber.setText(String.valueOf(update_number));
    }

    private static MultiframeStatsPanel instance;

    public static MultiframeStatsPanel createMultiframeStatsPanel() {
        if (instance == null){
            instance = new MultiframeStatsPanel();
        }
        return instance;
    }

    public static MultiframeStatsPanel getInstance() {
        return instance;
    }

    public Runnable getClient_endCB() {
        return client_endCB;
    }

    public void setClient_endCB(Runnable client_endCB) {
        this.client_endCB = client_endCB;
    }

}
